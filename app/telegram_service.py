import asyncio
import logging
import httpx
import os
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self, bot_token: str, chat_ids: list):
        self.bot_token = bot_token
        self.chat_ids = chat_ids if isinstance(chat_ids, list) else [chat_ids]
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
    
    async def send_order_notification(self, name: str, email: str, phone: str, items: str, total_quantity: int, comment: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram"""
        try:
            # –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ JSON
            import json
            try:
                cart_items = json.loads(items)
                items_text = ""
                total_price = 0
                
                for item in cart_items:
                    item_name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
                    item_quantity = item.get('quantity', 0)
                    item_price = item.get('price', 0)
                    item_total = item_quantity * item_price
                    total_price += item_total
                    
                    items_text += f"‚Ä¢ {item_name}\n"
                    items_text += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_quantity} —à—Ç.\n"
                    if item_price > 0:
                        items_text += f"  –¶–µ–Ω–∞: {item_price} —Ä—É–±./—à—Ç.\n"
                        items_text += f"  –°—É–º–º–∞: {item_total} —Ä—É–±.\n"
                    items_text += "\n"
                
                if total_price > 0:
                    items_text += f"üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.</b>\n\n"
                    
            except (json.JSONDecodeError, TypeError):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                items_text = items
            
            message = f"""üõí <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –ú–ï–¢–†–ò–ö–°</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name}
üìß <b>Email:</b> {email}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}
üì¶ <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {total_quantity} —à—Ç.

üìã <b>–¢–æ–≤–∞—Ä—ã:</b>
{items_text}"""

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if comment and comment.strip():
                message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{comment.strip()}\n\n"
            
            message += f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            success_count = 0
            async with httpx.AsyncClient() as client:
                for chat_id in self.chat_ids:
                    try:
                        response = await client.post(
                            f"{self.api_url}/sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": message,
                                "parse_mode": "HTML"
                            }
                        )
                        
                        if response.status_code == 200:
                            success_count += 1
                            logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram (chat_id: {chat_id})")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (chat_id: {chat_id}): {response.status_code} - {response.text}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ chat_id {chat_id}: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            message = "ü§ñ <b>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–∞–π—Ç—É –ú–ï–¢–†–ò–ö–°!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            success_count = 0
            async with httpx.AsyncClient() as client:
                for chat_id in self.chat_ids:
                    try:
                        response = await client.post(
                            f"{self.api_url}/sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": message,
                                "parse_mode": "HTML"
                            }
                        )
                        
                        if response.status_code == 200:
                            success_count += 1
                            logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (chat_id: {chat_id})")
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (chat_id: {chat_id}): {response.status_code} - {response.text}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id {chat_id}: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
def get_telegram_service():
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramService —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_ids_str = os.getenv("TELEGRAM_CHAT_IDS", "")
    
    if not bot_token:
        logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    if not chat_ids_str:
        logger.warning("TELEGRAM_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # –ü–∞—Ä—Å–∏–º chat_ids –∏–∑ —Å—Ç—Ä–æ–∫–∏
    chat_ids = [chat_id.strip() for chat_id in chat_ids_str.split(",") if chat_id.strip()]
    
    if not chat_ids:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å TELEGRAM_CHAT_IDS")
        return None
    
    return TelegramService(bot_token=bot_token, chat_ids=chat_ids)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
TELEGRAM_SERVICE = get_telegram_service()
